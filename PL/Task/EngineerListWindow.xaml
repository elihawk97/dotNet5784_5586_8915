<!-- EngineerListWindow.xaml: UI layout for displaying a list of engineers and providing interactions like selection and adding new engineers. 
     This window uses data binding and event handlers to create a dynamic and responsive user experience. -->

    <Window x:Class="Engineer.EngineerListWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Engineer"
        mc:Ignorable="d"
        DataContext="{Binding RelativeSource={RelativeSource Mode=Self}}"
        Title="EngineerListWindow" Height="640" Width="800">
  
    <!-- Outer Grid -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="40*"/>
            <RowDefinition Height="500*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <!--Inner, Top Grid-->
        <Grid HorizontalAlignment="Stretch" Height="auto" Grid.Row="0" VerticalAlignment="Stretch" Width="auto">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>


            <!-- ComboBox for selecting engineers based on experience level. 
             Binds to a source of experience levels and updates the ExpLevel property on selection change. -->
            <ComboBox
                SelectedValue="{Binding Path=ExpLevel, Mode=TwoWay}"
            ItemsSource="{Binding Source={StaticResource ExpCollectionKey}}"
                SelectionChanged="cbEngineerSelector_SelectionChanged"
            Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
            />
            <Label Content="Select Engineer" Grid.Column="0" HorizontalAlignment="Stretch"  VerticalAlignment="Stretch"/>
        </Grid>

        <!-- ListView for displaying the list of engineers. 
         ItemsSource is bound to the EngineerList collection in the ViewModel. 
         Double-clicking an item triggers ListView_MouseDoubleClick event handler. -->
        <ListView Margin="5" Grid.Row="1" ItemsSource="{Binding EngineerList}" MouseDoubleClick="ListView_MouseDoubleClick">
            <ListView.View>
                <GridView>
                    <GridViewColumn/>
                </GridView>
            </ListView.View>
        </ListView>

        <!-- Button for initiating the addition of a new engineer. 
         Clicking this button triggers the AddButton_Click event handler. -->
        <Button Content="Add" Grid.Row="2" HorizontalAlignment="Center" Height="50"
        Width="100" Click="AddButton_Click"/>

    </Grid>
    
</Window>
